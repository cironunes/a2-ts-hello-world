{"version":3,"sources":["broccoli/broccoli-flatten.ts"],"names":["DiffingFlatten","DiffingFlatten.constructor","DiffingFlatten.rebuild"],"mappings":"AAAA,IAAO,EAAE,WAAW,IAAI,CAAC,CAAC;AAC1B,IAAO,GAAG,WAAW,UAAU,CAAC,CAAC;AACjC,IAAO,IAAI,WAAW,MAAM,CAAC,CAAC;AAC9B,wCAAmE,2BAA2B,CAAC,CAAA;AAC/F,IAAI,aAAa,GAAG,OAAO,CAAC,iBAAiB,CAAC,CAAC,IAAI,CAAC;AAEpD,IAAI,SAAS,GAAG,OAAO,CAAC,QAAQ,KAAK,OAAO,CAAC;AAG7C;;;GAGG;AACH;IACEA,wBAAoBA,SAASA,EAAUA,SAASA,EAAUA,OAAOA;QAA7CC,cAASA,GAATA,SAASA,CAAAA;QAAUA,cAASA,GAATA,SAASA,CAAAA;QAAUA,YAAOA,GAAPA,OAAOA,CAAAA;IAAGA,CAACA;IAGrED,gCAAOA,GAAPA,UAAQA,QAAoBA;QAA5BE,iBA8BCA;QA7BCA,IAAIA,aAAaA,GAAGA,QAAQA,CAACA,UAAUA,CAACA;QAExCA,qFAAqFA;QACrFA,sEAAsEA;QACtEA,EAAEA,CAACA,CAACA,SAASA,CAACA,CAACA,CAACA;YACdA,aAAaA,GAAGA,aAAaA,CAACA,MAAMA,CAACA,QAAQA,CAACA,YAAYA,CAACA,CAACA;QAC9DA,CAACA;QAEDA,aAAaA,CAACA,OAAOA,CAACA,UAACA,eAAeA;YACpCA,IAAIA,cAAcA,GAAGA,IAAIA,CAACA,IAAIA,CAACA,KAAIA,CAACA,SAASA,EAAEA,eAAeA,CAACA,CAACA;YAChEA,IAAIA,YAAYA,GAAGA,IAAIA,CAACA,IAAIA,CAACA,KAAIA,CAACA,SAASA,EAAEA,IAAIA,CAACA,QAAQA,CAACA,eAAeA,CAACA,CAACA,CAACA;YAC7EA,IAAIA,WAAWA,GAAGA,IAAIA,CAACA,OAAOA,CAACA,YAAYA,CAACA,CAACA;YAE7CA,EAAEA,CAACA,CAACA,CAACA,EAAEA,CAACA,UAAUA,CAACA,WAAWA,CAACA,CAACA,CAACA,CAACA;gBAChCA,GAAGA,CAACA,UAAUA,CAACA,WAAWA,CAACA,CAACA;YAC9BA,CAACA;YAEDA,EAAEA,CAACA,CAACA,CAACA,EAAEA,CAACA,UAAUA,CAACA,YAAYA,CAACA,CAACA,CAACA,CAACA;gBACjCA,aAAaA,CAACA,cAAcA,EAAEA,YAAYA,CAACA,CAACA;YAC9CA,CAACA;YAACA,IAAIA,CAACA,CAACA;gBACNA,MAAMA,IAAIA,KAAKA,CAACA,sBAAmBA,IAAIA,CAACA,QAAQA,CAACA,eAAeA,CAACA,QAAIA;oBACrDA,qBAAkBA,eAAeA,OAAGA,CAACA,CAACA;YACxDA,CAACA;QACHA,CAACA,CAACA,CAACA;QAEHA,QAAQA,CAACA,YAAYA,CAACA,OAAOA,CAACA,UAACA,eAAeA;YAC5CA,IAAIA,YAAYA,GAAGA,IAAIA,CAACA,IAAIA,CAACA,KAAIA,CAACA,SAASA,EAAEA,IAAIA,CAACA,QAAQA,CAACA,eAAeA,CAACA,CAACA,CAACA;YAC7EA,EAAEA,CAACA,UAAUA,CAACA,YAAYA,CAACA,CAACA;QAC9BA,CAACA,CAACA,CAACA;IACLA,CAACA;IACHF,qBAACA;AAADA,CAnCA,AAmCCA,IAAA;AAnCY,sBAAc,iBAmC1B,CAAA;AAED;kBAAe,2CAAiB,CAAC,cAAc,CAAC,CAAC","file":"broccoli/broccoli-flatten.js","sourcesContent":["import fs = require('fs');\nimport fse = require('fs-extra');\nimport path = require('path');\nimport {wrapDiffingPlugin, DiffingBroccoliPlugin, DiffResult} from './diffing-broccoli-plugin';\nvar symlinkOrCopy = require('symlink-or-copy').sync;\n\nvar isWindows = process.platform === 'win32';\n\n\n/**\n * Intercepts each changed file and replaces its contents with\n * the associated changes.\n */\nexport class DiffingFlatten implements DiffingBroccoliPlugin {\n  constructor(private inputPath, private cachePath, private options) {}\n\n\n  rebuild(treeDiff: DiffResult) {\n    let pathsToUpdate = treeDiff.addedPaths;\n\n    // since we need to run on Windows as well we can't rely on symlinks being available,\n    // which means that we need to respond to both added and changed paths\n    if (isWindows) {\n      pathsToUpdate = pathsToUpdate.concat(treeDiff.changedPaths);\n    }\n\n    pathsToUpdate.forEach((changedFilePath) => {\n      var sourceFilePath = path.join(this.inputPath, changedFilePath);\n      var destFilePath = path.join(this.cachePath, path.basename(changedFilePath));\n      var destDirPath = path.dirname(destFilePath);\n\n      if (!fs.existsSync(destDirPath)) {\n        fse.mkdirpSync(destDirPath);\n      }\n\n      if (!fs.existsSync(destFilePath)) {\n        symlinkOrCopy(sourceFilePath, destFilePath);\n      } else {\n        throw new Error(`Duplicate file '${path.basename(changedFilePath)}' ` +\n                        `found in path '${changedFilePath}'`);\n      }\n    });\n\n    treeDiff.removedPaths.forEach((removedFilePath) => {\n      var destFilePath = path.join(this.cachePath, path.basename(removedFilePath));\n      fs.unlinkSync(destFilePath);\n    });\n  }\n}\n\nexport default wrapDiffingPlugin(DiffingFlatten);\n"],"sourceRoot":"/source/"}