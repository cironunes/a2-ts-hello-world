{"version":3,"sources":["broccoli/broccoli-merge-trees.ts"],"names":["outputFileSync","pathOverwrittenError","MergeTrees","MergeTrees.constructor","MergeTrees.rebuild"],"mappings":"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AACA,KAAKA,CAACA,CAACA;oBACvBA,CAACA;oBAACA,IAAIA,CAACA,CAACA;wBACNA,MAAMA,oBAAoBA,CAACA,WAAWA,CAACA,CAACA;oBAC1CA,CAACA;gBACHA,CAACA,CAACA,CAACA;YACLA,CAACA,CAACA,CAACA;QAELA,CAACA;QAACA,IAAIA,CAACA,CAACA;YACNA,eAAeA;YACfA,SAASA,CAACA,OAAOA,EAAEA,CAACA,OAAOA,CAACA,UAACA,QAAoBA,EAAEA,KAAKA;gBACtDA,KAAKA,GAAGA,SAASA,CAACA,MAAMA,GAAGA,CAACA,GAAGA,KAAKA,CAACA;gBACrCA,EAAEA,CAACA,CAACA,QAAQA,CAACA,YAAYA,CAACA,CAACA,CAACA;oBAC1BA,QAAQA,CAACA,YAAYA,CAACA,OAAOA,CAACA,UAACA,WAAWA;wBACxCA,IAAIA,KAAKA,GAAGA,KAAIA,CAACA,SAASA,CAACA,WAAWA,CAACA,CAACA;wBACxCA,+BAA+BA;wBAC/BA,kCAAkCA;wBAClCA,EAAEA,CAACA,CAACA,KAAKA,CAACA,KAAKA,CAACA,MAAMA,GAAGA,CAACA,CAACA,KAAKA,KAAKA,CAACA,CAACA,CAACA;4BACtCA,aAAaA,CAACA,IAAIA,CAACA,IAAIA,CAACA,IAAIA,CAACA,KAAIA,CAACA,SAASA,EAAEA,WAAWA,CAACA,CAACA,CAACA;4BAC3DA,KAAKA,CAACA,GAAGA,EAAEA,CAACA;4BACZA,EAAEA,CAACA,CAACA,KAAKA,CAACA,MAAMA,KAAKA,CAACA,CAACA,CAACA,CAACA;gCACvBA,KAAIA,CAACA,SAASA,CAACA,WAAWA,CAACA,GAAGA,SAASA,CAACA;4BAC1CA,CAACA;4BAACA,IAAIA,CAACA,EAAEA,CAACA,CAACA,CAACA,OAAOA,CAACA,WAAWA,CAACA,CAACA,CAACA,CAACA;gCACjCA,EAAEA,CAACA,CAACA,KAAKA,CAACA,MAAMA,KAAKA,CAACA,IAAIA,CAACA,SAASA,CAACA,CAACA,CAACA;oCACrCA,MAAMA,oBAAoBA,CAACA,WAAWA,CAACA,CAACA;gCAC1CA,CAACA;gCACDA,IAAIA,CAACA,WAAWA,CAACA,CAACA;4BACpBA,CAACA;wBACHA,CAACA;oBACHA,CAACA,CAACA,CAACA;gBACLA,CAACA;gBAEDA,IAAIA,aAAaA,GAAGA,QAAQA,CAACA,UAAUA,CAACA;gBAExCA,EAAEA,CAACA,CAACA,SAASA,CAACA,CAACA,CAACA;oBACdA,aAAaA,GAAGA,aAAaA,CAACA,MAAMA,CAACA,QAAQA,CAACA,YAAYA,CAACA,CAACA;gBAC9DA,CAACA;gBAEDA,aAAaA,CAACA,OAAOA,CAACA,UAACA,WAAWA;oBAChCA,IAAIA,KAAKA,GAAGA,KAAIA,CAACA,SAASA,CAACA,WAAWA,CAACA,CAACA;oBACxCA,EAAEA,CAACA,CAACA,KAAKA,KAAKA,SAASA,CAACA,CAACA,CAACA;wBACxBA,iBAAiBA;wBACjBA,KAAIA,CAACA,SAASA,CAACA,WAAWA,CAACA,GAAGA,CAACA,KAAKA,CAACA,CAACA;wBACtCA,IAAIA,CAACA,WAAWA,CAACA,CAACA;oBACpBA,CAACA;oBAACA,IAAIA,CAACA,EAAEA,CAACA,CAACA,CAACA,QAAQA,CAACA,KAAKA,EAAEA,KAAKA,CAACA,CAACA,CAACA,CAACA;wBACnCA,KAAKA,CAACA,IAAIA,CAACA,KAAKA,CAACA,CAACA;wBAClBA,KAAKA,CAACA,IAAIA,CAACA,UAACA,CAACA,EAAEA,CAACA,IAAKA,OAAAA,CAACA,GAAGA,CAACA,EAALA,CAAKA,CAACA,CAACA;wBAC5BA,EAAEA,CAACA,CAACA,KAAKA,CAACA,MAAMA,GAAGA,CAACA,IAAIA,CAACA,SAASA,CAACA,CAACA,CAACA;4BACnCA,MAAMA,oBAAoBA,CAACA,WAAWA,CAACA,CAACA;wBAC1CA,CAACA;wBACDA,EAAEA,CAACA,CAACA,KAAKA,CAACA,KAAKA,CAACA,MAAMA,GAAGA,CAACA,CAACA,KAAKA,KAAKA,IAAIA,CAACA,OAAOA,CAACA,WAAWA,CAACA,CAACA,CAACA,CAACA;4BAC/DA,IAAIA,CAACA,WAAWA,CAACA,CAACA;wBACpBA,CAACA;oBACHA,CAACA;gBACHA,CAACA,CAACA,CAACA;YACLA,CAACA,CAACA,CAACA;QACLA,CAACA;QAEDA,aAAaA,CAACA,OAAOA,CAACA,UAACA,QAAQA,IAAKA,OAAAA,GAAGA,CAACA,UAAUA,CAACA,QAAQA,CAACA,EAAxBA,CAAwBA,CAACA,CAACA;QAC9DA,WAAWA,CAACA,OAAOA,CAACA,UAACA,WAAWA;YAC9BA,IAAIA,KAAKA,GAAGA,KAAIA,CAACA,SAASA,CAACA,WAAWA,CAACA,CAACA;YACxCA,IAAIA,QAAQA,GAAGA,IAAIA,CAACA,IAAIA,CAACA,KAAIA,CAACA,SAASA,EAAEA,WAAWA,CAACA,CAACA;YACtDA,IAAIA,WAAWA,GAAGA,KAAKA,CAACA,KAAKA,CAACA,MAAMA,GAAGA,CAACA,CAACA,CAACA;YAC1CA,IAAIA,eAAeA,GAAGA,KAAIA,CAACA,UAAUA,CAACA,WAAWA,CAACA,CAACA;YACnDA,IAAIA,UAAUA,GAAGA,IAAIA,CAACA,IAAIA,CAACA,eAAeA,EAAEA,WAAWA,CAACA,CAACA;YACzDA,EAAEA,CAACA,CAACA,KAAKA,CAACA,MAAMA,GAAGA,CAACA,CAACA,CAACA,CAACA;gBACrBA,GAAGA,CAACA,UAAUA,CAACA,QAAQA,CAACA,CAACA;YAC3BA,CAACA;YACDA,cAAcA,CAACA,UAAUA,EAAEA,QAAQA,CAACA,CAACA;QACvCA,CAACA,CAACA,CAACA;IACLA,CAACA;IACHF,iBAACA;AAADA,CA/GA,AA+GCA,IAAA;AA/GY,kBAAU,aA+GtB,CAAA;AAED;kBAAe,2CAAiB,CAAC,UAAU,CAAC,CAAC","file":"broccoli/broccoli-merge-trees.js","sourcesContent":["import fs = require('fs');\nimport fse = require('fs-extra');\nimport path = require('path');\nvar symlinkOrCopySync = require('symlink-or-copy').sync;\nimport {wrapDiffingPlugin, DiffingBroccoliPlugin, DiffResult} from './diffing-broccoli-plugin';\n\nvar isWindows = process.platform === 'win32';\n\ninterface MergeTreesOptions {\n  overwrite?: boolean;\n}\n\nfunction outputFileSync(sourcePath, destPath) {\n  let dirname = path.dirname(destPath);\n  fse.mkdirsSync(dirname, {fs: fs});\n  symlinkOrCopySync(sourcePath, destPath);\n}\n\nfunction pathOverwrittenError(path) {\n  const msg = 'Either remove the duplicate or enable the \"overwrite\" option for this merge.';\n  return new Error(`Duplicate path found while merging trees. Path: \"${path}\".\\n${msg}`);\n}\n\nexport class MergeTrees implements DiffingBroccoliPlugin {\n  private pathCache: {[key: string]: number[]} = Object.create(null);\n  public options: MergeTreesOptions;\n  private firstBuild: boolean = true;\n\n  constructor(public inputPaths: string[], public cachePath: string,\n              options: MergeTreesOptions = {}) {\n    this.options = options || {};\n  }\n\n  rebuild(treeDiffs: DiffResult[]) {\n    let overwrite = this.options.overwrite;\n    let pathsToEmit: string[] = [];\n    let pathsToRemove: string[] = [];\n    let emitted: {[key: string]: boolean} = Object.create(null);\n    let contains = (cache, val) => {\n      for (let i = 0, ii = cache.length; i < ii; ++i) {\n        if (cache[i] === val) return true;\n      }\n      return false;\n    };\n\n    let emit = (relativePath) => {\n      // ASSERT(!emitted[relativePath]);\n      pathsToEmit.push(relativePath);\n      emitted[relativePath] = true;\n    };\n\n    if (this.firstBuild) {\n      this.firstBuild = false;\n\n      // Build initial cache\n      treeDiffs.reverse().forEach((treeDiff: DiffResult, index) => {\n        index = treeDiffs.length - 1 - index;\n        treeDiff.addedPaths.forEach((changedPath) => {\n          let cache = this.pathCache[changedPath];\n          if (cache === undefined) {\n            this.pathCache[changedPath] = [index];\n            pathsToEmit.push(changedPath);\n          } else if (overwrite) {\n            // ASSERT(contains(pathsToEmit, changedPath));\n            cache.unshift(index);\n          } else {\n            throw pathOverwrittenError(changedPath);\n          }\n        });\n      });\n\n    } else {\n      // Update cache\n      treeDiffs.reverse().forEach((treeDiff: DiffResult, index) => {\n        index = treeDiffs.length - 1 - index;\n        if (treeDiff.removedPaths) {\n          treeDiff.removedPaths.forEach((removedPath) => {\n            let cache = this.pathCache[removedPath];\n            // ASSERT(cache !== undefined);\n            // ASSERT(contains(cache, index));\n            if (cache[cache.length - 1] === index) {\n              pathsToRemove.push(path.join(this.cachePath, removedPath));\n              cache.pop();\n              if (cache.length === 0) {\n                this.pathCache[removedPath] = undefined;\n              } else if (!emitted[removedPath]) {\n                if (cache.length === 1 && !overwrite) {\n                  throw pathOverwrittenError(removedPath);\n                }\n                emit(removedPath);\n              }\n            }\n          });\n        }\n\n        let pathsToUpdate = treeDiff.addedPaths;\n\n        if (isWindows) {\n          pathsToUpdate = pathsToUpdate.concat(treeDiff.changedPaths);\n        }\n\n        pathsToUpdate.forEach((changedPath) => {\n          let cache = this.pathCache[changedPath];\n          if (cache === undefined) {\n            // File was added\n            this.pathCache[changedPath] = [index];\n            emit(changedPath);\n          } else if (!contains(cache, index)) {\n            cache.push(index);\n            cache.sort((a, b) => a - b);\n            if (cache.length > 1 && !overwrite) {\n              throw pathOverwrittenError(changedPath);\n            }\n            if (cache[cache.length - 1] === index && !emitted[changedPath]) {\n              emit(changedPath);\n            }\n          }\n        });\n      });\n    }\n\n    pathsToRemove.forEach((destPath) => fse.removeSync(destPath));\n    pathsToEmit.forEach((emittedPath) => {\n      let cache = this.pathCache[emittedPath];\n      let destPath = path.join(this.cachePath, emittedPath);\n      let sourceIndex = cache[cache.length - 1];\n      let sourceInputPath = this.inputPaths[sourceIndex];\n      let sourcePath = path.join(sourceInputPath, emittedPath);\n      if (cache.length > 1) {\n        fse.removeSync(destPath);\n      }\n      outputFileSync(sourcePath, destPath);\n    });\n  }\n}\n\nexport default wrapDiffingPlugin(MergeTrees);\n"],"sourceRoot":"/source/"}