{"version":3,"sources":["broccoli/broccoli-replace.ts"],"names":["DiffingReplace","DiffingReplace.constructor","DiffingReplace.rebuild"],"mappings":"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","file":"broccoli/broccoli-replace.js","sourcesContent":["import fs = require('fs');\nimport fse = require('fs-extra');\nimport path = require('path');\nimport {wrapDiffingPlugin, DiffingBroccoliPlugin, DiffResult} from './diffing-broccoli-plugin';\n\nvar minimatch = require('minimatch');\nvar FILE_ENCODING = {encoding: 'utf-8'};\n\n/**\n * Intercepts each changed file and replaces its contents with\n * the associated changes.\n */\nclass DiffingReplace implements DiffingBroccoliPlugin {\n  constructor(private inputPath, private cachePath, private options) {}\n\n  rebuild(treeDiff: DiffResult) {\n    var patterns = this.options.patterns;\n    var files = this.options.files;\n\n    treeDiff.addedPaths.concat(treeDiff.changedPaths)\n        .forEach((changedFilePath) => {\n          var sourceFilePath = path.join(this.inputPath, changedFilePath);\n          var destFilePath = path.join(this.cachePath, changedFilePath);\n          var destDirPath = path.dirname(destFilePath);\n\n          if (!fs.existsSync(destDirPath)) {\n            fse.mkdirpSync(destDirPath);\n          }\n\n          var fileMatches = files.some((filePath) => minimatch(changedFilePath, filePath));\n          if (fileMatches) {\n            var content = fs.readFileSync(sourceFilePath, FILE_ENCODING);\n            patterns.forEach((pattern) => {\n              var replacement = pattern.replacement;\n              if (typeof replacement === 'function') {\n                replacement = function(content) {\n                  return pattern.replacement(content, changedFilePath);\n                };\n              }\n              content = content.replace(pattern.match, replacement);\n            });\n            fs.writeFileSync(destFilePath, content, FILE_ENCODING);\n          } else if (!fs.existsSync(destFilePath)) {\n            try {\n              fs.symlinkSync(sourceFilePath, destFilePath);\n            } catch (e) {\n              fs.writeFileSync(destFilePath, fs.readFileSync(sourceFilePath));\n            }\n          }\n        });\n\n    treeDiff.removedPaths.forEach((removedFilePath) => {\n      var destFilePath = path.join(this.cachePath, removedFilePath);\n      fs.unlinkSync(destFilePath);\n    });\n  }\n}\n\nexport default wrapDiffingPlugin(DiffingReplace);\n"],"sourceRoot":"/source/"}